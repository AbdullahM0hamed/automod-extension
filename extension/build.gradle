apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import java.io.File
import java.io.FileOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled false
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "automodext.zip"
        }

        variant.assembleProvider.get().finalizedBy(makeDex)
    }

    task makeDex {
        doFirst {
            def extLoc = new File(project.projectDir.getAbsolutePath() + "/build/outputs/aar/automodext.zip")
            def buildFolder = new File(project.projectDir.getAbsolutePath() + "/build")

            copy {
                from zipTree(extLoc)
                into buildFolder
            }
            def d8 = sdkDirectory.getPath() + '/build-tools/' + buildToolsVersion + '/lib/d8.jar'
            def build = project.projectDir.getAbsolutePath() + '/build/'
            javaexec {
                main = 'com.android.tools.r8.D8'
                classpath = fileTree(d8)
                args = ['--release', '--output', build + project.projectDir.getName() + '.zip', build + 'classes.jar']
            }

            def manifest = new File(project.projectDir.getAbsolutePath() + "/src/main/manifest.json")
            if (manifest.exists()) {
                def extension = build + project.projectDir.getName() + ".zip"
		FileInputStream fis = new FileInputStream(extension)
                ZipInputStream zis = new ZipInputStream(fis)

                def newName = new File(build + project.projectDir.getName() + ".amd")
                try (ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(newName))) {
                    byte[] buff = new byte[1024]
                    int bytes
                    ZipEntry entry
                    while ((entry = zis.getNextEntry()) != null) {
                        zOut.putNextEntry(entry)
                        while ((bytes = zis.read(buff)) != -1) {
                            zOut.write(buff, 0, bytes)
                        }
                        zOut.closeEntry()
                    }
                    entry = new ZipEntry(manifest.getName())
                    zOut.putNextEntry(entry)
                    byte[] buffer = new byte[4096]
                    int bytesRead
                    try (FileInputStream input = new FileInputStream(manifest)) {
                        while ((bytesRead = input.read(buffer)) != -1) {
                            zOut.write(buffer, 0, bytesRead)
                        }
                    }
                    zOut.closeEntry()
                }
                (new File(extension)).delete()
            }
        }
    }

    tasks.build.finalizedBy(makeDex)
}

dependencies {
    compileOnly files(project(":automod").projectDir.getAbsolutePath() + "/build/updated.jar")
}

git {
    implementation "https://github.com/AbdullahM0hamed/automod", {
        name 'automod'
        commit '0f470de0cee8bc219815745d1ab86619779d5065'
        projectPath '/automod'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xskip-metadata-version-check"]
    }
}

tasks.named("preBuild").configure {
    dependsOn project(":automod").tasks.automod
}
